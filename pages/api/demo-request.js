export default async function handler(req, res) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–µ–Ω–∞
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  const { name, company, email, phone, employees, message } = req.body;

  // Telegram Bot API
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN';
  const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || 'YOUR_CHAT_ID';

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const telegramMessage = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–µ–º–æ!</b>

üë§ <b>–ò–º—è:</b> ${name}
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${company}
üìß <b>Email:</b> ${email}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}
üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é—Ä–∏—Å—Ç–æ–≤:</b> ${employees}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
`;

  try {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: telegramMessage,
        parse_mode: 'HTML'
      })
    });

    const data = await response.json();

    if (!response.ok) {
      console.error('Telegram error:', data);
      throw new Error('Telegram API error');
    }

    res.status(200).json({ success: true, message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏' });
  }
}